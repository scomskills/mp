<?xml version="1.0" encoding="utf-8"?>
<ManagementPack SchemaVersion="2.0" ContentReadable="true" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <Manifest>
    <Identity>
      <ID>Windows.Monitoring.Extended</ID>
      <Version>1.0.0.35</Version>
    </Identity>
    <Name>Windows.Monitoring.Extended</Name>
    <References>
      <Reference Alias="Windows">
        <ID>Microsoft.Windows.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows2003">
        <ID>Microsoft.Windows.Server.2003</ID>
        <Version>6.0.6989.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows2008M">
        <ID>Microsoft.Windows.Server.2008.Monitoring</ID>
        <Version>6.0.6989.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Windows2012M">
        <ID>Microsoft.Windows.Server.2012.Monitoring</ID>
        <Version>6.0.6989.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Health">
        <ID>System.Health.Library</ID>
        <Version>7.0.8432.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="System">
        <ID>System.Library</ID>
        <Version>7.5.8501.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
      <Reference Alias="Perf">
        <ID>System.Performance.Library</ID>
        <Version>7.0.8432.0</Version>
        <PublicKeyToken>31bf3856ad364e35</PublicKeyToken>
      </Reference>
    </References>
  </Manifest>
  <TypeDefinitions>
    <ModuleTypes>
      <DataSourceModuleType ID="Windows.Monitoring.Extended.DataSource.LogicalDiskFreeSpace" Accessibility="Internal" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DiskLabel" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="0" maxOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="Interval" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="DS" TypeID="Windows!Microsoft.Windows.TimedScript.PropertyBagProvider">
                <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
                <SyncTime />
                <ScriptName>Windows.Monitoring.Extended.LogicalDiskFreeSpace.vbs</ScriptName>
                <Arguments>$Config/ComputerName$ $Config/IntervalSeconds$ false</Arguments>
                <ScriptBody>
                  
'*************************************************************************
' $ScriptName: "Microsoft.Windows.Server.Common"$
'
' Purpose: To have one place for common stuff across various BaseOS VBScripts
'
' $File: Microsoft.Windows.Server.Common.vbs$
' 
' Arguments
' TargetComputer   = oArgs(0)
' IntervalSeconds   = CDbl(oArgs(1))
' g_DebugFlag      = CBool(oArgs(2))
' 
' Modified by Jonathan Almquist (jonathan@scomskills.com) to support cookdown and extended local monitor configuration.
'*************************************************************************

Option Explicit

SetLocale("en-us")

' LogScripEvent Constants
Const lsEventError                 = 1
Const lsEventWarning               = 2
Const lsEventInformation           = 3

' WMI Constants
Const wbemCimtypeUseDefault        = 0   'Use Default Type CIM type - Custom
Const wbemCimtypeSint16            = 2   'Signed 16-bit integer
Const wbemCimtypeSint32            = 3   'Signed 32-bit integer
Const wbemCimtypeReal32            = 4   '32-bit real number
Const wbemCimtypeReal64            = 5   '64-bit real number
Const wbemCimtypeString            = 8   'String
Const wbemCimtypeBoolean           = 11  'Boolean value
Const wbemCimtypeObject            = 13  'CIM object
Const wbemCimtypeSint8             = 16  'Signed 8-bit integer
Const wbemCimtypeUint8             = 17  'Unsigned 8-bit integer
Const wbemCimtypeUint16            = 18  'Unsigned 16-bit integer
Const wbemCimtypeUint32            = 19  'Unsigned 32-bit integer
Const wbemCimtypeSint64            = 20  'Signed 64-bit integer
Const wbemCimtypeUint64            = 21  'Unsigned 64-bit integer
Const wbemCimtypeDatetime          = 101 'Date/time value
Const wbemCimtypeReference         = 102 'Reference to a CIM object
Const wbemCimtypeChar16            = 103 '16-bit character

Const ErrAction_None               = 0
Const ErrAction_Trace              = 1
Const ErrAction_ThrowError         = 16
Const ErrAction_Abort              = 32
Const ErrAction_ThrowErrorAndAbort = 48

Dim g_ErrorEventNumber, g_TraceEventNumber, g_DebugFlag
g_ErrorEventNumber = 4001
g_TraceEventNumber = 4002
g_DebugFlag = False

'---------------------------------------------------------------------------
' Returns WMI Instance requested. Tries to execute WMI query a N times.
'---------------------------------------------------------------------------
Function WMIGetInstanceExTryN(oWMI, ByVal sInstance, ByVal N)
Dim oInstance, nInstanceCount
Dim e, i
Set e = New Error

For i = 0 To i &lt; N
On Error Resume Next
Set oInstance = oWMI.InstancesOf(sInstance)
e.Save
On Error Goto 0
If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
If i = N - 1 Then
ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
End If
Else
On Error Resume Next
nInstanceCount = oInstance.Count
e.Save
On Error Goto 0
If e.Number &lt;&gt; 0 Then
If i = N - 1 Then
ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
End If
Else
Exit For
End If
End If
WScript.Sleep(1000)
Next

Set WMIGetInstanceExTryN = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceEx(oWMI, ByVal sInstance)
Dim oInstance, nInstanceCount
Dim e
Set e = New Error

On Error Resume Next
Set oInstance = oWMI.InstancesOf(sInstance)
e.Save
On Error Goto 0
If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
End If

'Determine if we queried a valid WMI class - Count will return 0 or empty
On Error Resume Next
nInstanceCount = oInstance.Count
e.Save
On Error Goto 0
If e.Number &lt;&gt; 0 Then
ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
End If

Set WMIGetInstanceEx = oInstance
End Function

'---------------------------------------------------------------------------
' Connect to WMI.
'---------------------------------------------------------------------------
Function WMIConnect(ByVal sNamespace)
Dim oWMI
Dim e
Set e = New Error
On Error Resume Next
Set oWMI = GetObject(sNamespace)
e.Save
On Error Goto 0
If IsEmpty(oWMI) Then
ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
End If
Set WMIConnect = oWMI
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstance(ByVal sNamespace, ByVal sInstance)
Dim oWMI, oInstance
Set oWMI = WMIConnect(sNamespace)
Set oInstance = WMIGetInstanceEx(oWMI, sInstance)
Set WMIGetInstance = oInstance
End Function

'---------------------------------------------------------------------------
' Returns WMI Instance requested.
'---------------------------------------------------------------------------
Function WMIGetInstanceNoAbort(ByVal sNamespace, ByVal sInstance)
Dim oWMI, oInstance, nInstanceCount

On Error Resume Next
Set oWMI = GetObject(sNamespace)
If Not IsEmpty(oWMI) Then
Set oInstance = oWMI.InstancesOf(sInstance)
If Not IsEmpty(oInstance) And Err.Number = 0 Then
'Determine if we queried a valid WMI class - Count will return 0 or empty
nInstanceCount = oInstance.Count
If Err.Number = 0 Then
Set WMIGetInstanceNoAbort = oInstance
On Error Goto 0
Exit Function
End If
End If
End If

On Error Goto 0
Set WMIGetInstanceNoAbort = Nothing
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set.
'---------------------------------------------------------------------------
Function WMIExecQuery(ByVal sNamespace, ByVal sQuery)
Dim oWMI, oQuery, nInstanceCount
Dim e
Set e = New Error
On Error Resume Next
Set oWMI = GetObject(sNamespace)
e.Save
On Error Goto 0
If IsEmpty(oWMI) Then
ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'.  Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
End If

On Error Resume Next
Set oQuery = oWMI.ExecQuery(sQuery)
e.Save
On Error Goto 0
If IsEmpty(oQuery) Or e.Number &lt;&gt; 0 Then
ThrowScriptError "The Query '" &amp; sQuery &amp; "' returned an invalid result set.  Please check to see if this is a valid WMI Query.", e
End If

'Determine if we queried a valid WMI class - Count will return 0 or empty
On Error Resume Next
nInstanceCount = oQuery.Count
e.Save
On Error Goto 0
If e.Number &lt;&gt; 0 Then
ThrowScriptError "The Query '" &amp; sQuery &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI Query.", e
End If

Set WMIExecQuery = oQuery
End Function

'---------------------------------------------------------------------------
' Executes the WMI query and returns the result set, no abort version.
'---------------------------------------------------------------------------
Function WMIExecQueryNoAbort(ByVal sNamespace, ByVal sQuery)
Dim oWMI, oQuery
Set oWMI = GetObject(sNamespace)
Set oQuery = oWMI.ExecQuery(sQuery)
Set WMIExecQueryNoAbort = oQuery
End Function

'---------------------------------------------------------------------------
' Retrieves WMI property.
'---------------------------------------------------------------------------
Function GetWMIProperty(oWmi, sPropName, nCIMType, ErrAction)
Dim sValue, oWmiProp, oError
Set oError = New Error

' Check that object is valid.
If Not IsValidObject(oWmi) Then
If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
ThrowScriptErrorNoAbort "Accessing property on invalid WMI object.", oError
If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
Quit()

GetWMIProperty = ""
Exit Function
End If

' Get properties...
On Error Resume Next
Set oWmiProp = oWmi.Properties_.Item(sPropName)
oError.Save
If oError.Number &lt;&gt; 0 Then
If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
Quit()
End If
On Error Goto 0

If IsValidObject(oWmiProp) Then
sValue = oWmiProp.Value

If IsNull(sValue) Then ' If value is null, return blank to avoid any issues
GetWMIProperty = ""
Else
Select Case (oWmiProp.CIMType)
Case wbemCimtypeString, wbemCimtypeSint16, wbemCimtypeSint32, wbemCimtypeReal32, wbemCimtypeReal64, wbemCimtypeSint8, wbemCimtypeUint8, wbemCimtypeUint16, wbemCimtypeUint32, wbemCimtypeSint64, wbemCimtypeUint64:
If Not oWmiProp.IsArray Then
GetWMIProperty = Trim(CStr(sValue))
Else
GetWMIProperty = Join(sValue, ", ")
End If
Case wbemCimtypeBoolean:
If sValue = 1 Or UCase(sValue) = "TRUE" Then
GetWMIProperty = "True"
Else
GetWMIProperty = "False"
End If
Case wbemCimtypeDatetime:
Dim sTmpStrDate

' First attempt to convert the whole wmi date string
sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
Mid(sValue, 7, 2) &amp; "/" &amp; _
Left(sValue, 4) &amp; " " &amp; _
Mid (sValue, 9, 2) &amp; ":" &amp; _
Mid(sValue, 11, 2) &amp; ":" &amp; _
Mid(sValue, 13, 2)
If IsDate(sTmpStrDate) Then
GetWMIProperty = CDate(sTmpStrDate)
Else
' Second, attempt just to convert the YYYYMMDD
sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
Mid(sValue, 7, 2) &amp; "/" &amp; _
Left(sValue, 4)
If IsDate(sTmpStrDate) Then
GetWMIProperty = CDate(sTmpStrDate)
Else
' Nothing works - return passed in string
GetWMIProperty = sValue
End If
End If
Case Else:
GetWMIProperty = ""
End Select
End If
Else
If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
Quit()

GetWMIProperty = ""
End If

If (ErrAction And ErrAction_Trace) = ErrAction_Trace Then _
WScript.Echo "  + " &amp; sPropName &amp; " :: '" &amp; GetWMIProperty &amp; "'"
End Function

'---------------------------------------------------------------------------
' Class for error handling.
'---------------------------------------------------------------------------
Class Error
Private m_lNumber
Private m_sSource
Private m_sDescription
Private m_sHelpContext
Private m_sHelpFile
Public Sub Save()
m_lNumber = Err.number
m_sSource = Err.Source
m_sDescription = Err.Description
m_sHelpContext = Err.HelpContext
m_sHelpFile = Err.helpfile
End Sub
Public Sub Raise()
Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
End Sub
Public Sub Clear()
m_lNumber = 0
m_sSource = ""
m_sDescription = ""
m_sHelpContext = ""
m_sHelpFile = ""
End Sub
Public Default Property Get Number()
Number = m_lNumber
End Property
Public Property Get Source()
Source = m_sSource
End Property
Public Property Get Description()
Description = m_sDescription
End Property
Public Property Get HelpContext()
HelpContext = m_sHelpContext
End Property
Public Property Get HelpFile()
HelpFile = m_sHelpFile
End Property
End Class

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptErrorNoAbort(ByVal sMessage, ByVal oErr)
' Retrieve the name of this (running) script
Dim FSO, ScriptFileName
Set FSO = CreateObject("Scripting.FileSystemObject")
ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
Set FSO = Nothing

If Not IsNull(oErr) Then _
sMessage = sMessage &amp; ". " &amp; oErr.Description

On Error Resume Next
Dim oAPITemp
Set oAPITemp = CreateObject("MOM.ScriptAPI")
oAPITemp.LogScriptEvent ScriptFileName, g_ErrorEventNumber, lsEventError, sMessage
On Error Goto 0

WScript.Echo sMessage
End Function

'---------------------------------------------------------------------------
' Creates an event and sends it back to the mom server.
'---------------------------------------------------------------------------
Function ThrowScriptError(Byval sMessage, ByVal oErr)
On Error Resume Next
ThrowScriptErrorNoAbort sMessage, oErr
Quit()
End Function

'---------------------------------------------------------------------------
' Creates automation objects and returns it.
'---------------------------------------------------------------------------
Function MomCreateObject(ByVal sProgramId)
Dim oError
Set oError = New Error

On Error Resume Next
Set MomCreateObject = CreateObject(sProgramId)
oError.Save
On Error Goto 0

If oError.Number &lt;&gt; 0 Then
ThrowScriptError "Unable to create automation object '" &amp; sProgramId &amp; "'", oError
End If
End Function

'---------------------------------------------------------------------------
' Quits the script.
'---------------------------------------------------------------------------
Function Quit()
WScript.Quit()
End Function

'---------------------------------------------------------------------------
' Checks whether oObject is valid.
'---------------------------------------------------------------------------
Function IsValidObject(ByVal oObject)
IsValidObject = False
If IsObject(oObject) Then
If Not oObject Is Nothing Then
IsValidObject = True
End If
End If
End Function

'---------------------------------------------------------------------------
' Outputs arguments for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogArguments
Dim oArgs
Set oArgs = WScript.Arguments
Dim i, sArgs
For i = 0 To oArgs.Count - 1
sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
Next
TraceLogMessage "Arguments:" &amp; sArgs
End Function

'---------------------------------------------------------------------------
' Verifies that number of arguments is correct
'---------------------------------------------------------------------------
Function VerifyNumberOfArguments(ByVal NumberOfArguments)
Dim oArgs
Set oArgs = WScript.Arguments
If oArgs.Count &lt;&gt; NumberOfArguments Then
Dim i, sArgs
For i = 0 To oArgs.Count - 1
sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
Next
ThrowScriptError "Invalid number of arguments (" &amp; oArgs.Count &amp; " instead of " &amp; NumberOfArguments &amp; "). Arguments:" &amp; sArgs, Null
End If
End Function

'---------------------------------------------------------------------------
' Outputs to file and echo for debugging purposes
'---------------------------------------------------------------------------
Function TraceLogMessage(ByVal sMessage)
' WScript.Echo sMessage

If g_DebugFlag = True Then
' Retrieve the name of this (running) script
Dim FSO, ScriptFileName
Set FSO = CreateObject("Scripting.FileSystemObject")
ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
Set FSO = Nothing

On Error Resume Next
Dim oAPITemp
Set oAPITemp = MOMCreateObject("MOM.ScriptAPI")
oAPITemp.LogScriptEvent ScriptFileName, g_TraceEventNumber, lsEventInformation, sMessage
On Error Goto 0
End If
End Function

'---------------------------------------------------------------------------
' Verifies the expression. If equals to False then generates an error and quits the script
'   Usage:
'     Verify Not WMISet Is Nothing, "WMISet is invalid!"
'     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
'---------------------------------------------------------------------------
Function Verify(ByVal bBool, ByVal sMessage)
If bBool = False Then
ThrowScriptError sMessage, Null
End If
End Function


Function GetRegistryKeyValue(ByVal keyPath, ByVal key)
Dim oReg, strKeyValue

Set oReg = MOMCreateObject("WScript.Shell")
On Error Resume Next

strKeyValue = oReg.RegRead(keyPath &amp; key)
If Err.Number &lt;&gt; 0 Then
ThrowScriptError "An error occurred while reading the registry: '" &amp; keyPath &amp; key &amp; "'", Err.Description
strKeyValue = ""
End If

' resume error
On Error Goto 0

GetRegistryKeyValue = strKeyValue
End Function

Const BYTES_IN_MB = 1048576 '=2^20

Const DriveHealthyState            = 0
Const DriveWarningState            = 1
Const DriveErrorState              = 2

Call Main

Sub Main()

VerifyNumberOfArguments(3)

Dim oArgs
Set oArgs = WScript.Arguments
Dim TargetComputer, IntervalSeconds, g_DebugFlag
TargetComputer   = oArgs(0)
IntervalSeconds  = CDbl(oArgs(1))
g_DebugFlag      = CBool(oArgs(2))

TraceLogArguments

Dim oAPI, oBag
Set oAPI = MOMCreateObject("MOM.ScriptAPI")

Call oAPI.LogScriptEvent("Windows.Monitoring.Extended.LogicalDiskFreeSpace.vbs",100,0,"Script Started")

Dim IsVolumeInfoSupported, SystemDrive, bIsSystemDrive
IsVolumeInfoSupported = Is_Win32_Volume_Supported(TargetComputer)
SystemDrive = Get_System_Drive(TargetComputer)

Dim oWmiDiskSet, oWmiDisk, bBagIsNotEmpty

bBagIsNotEmpty = "false"

If IsVolumeInfoSupported Then
Set oWmiDiskSet = WMIGetInstance("winmgmts:\\" + TargetComputer &amp; "\root\cimv2", "Win32_Volume")
Else
Set oWmiDiskSet = WMIExecQuery("winmgmts:\\" + TargetComputer &amp; "\root\cimv2", "select * from Win32_LogicalDisk where (DriveType=3 or DriveType=6) and FileSystem != null")
End If

For Each oWmiDisk in oWmiDiskSet
If oWmiDisk.DriveType = 3 Then
Dim sDriveLetter, nFreeSpace, nMaxSize, nPctFree, nMBFree

nFreeSpace = oWmiDisk.FreeSpace
If IsNull(nFreeSpace) Then _
nFreeSpace = 0

If IsVolumeInfoSupported Then
sDriveLetter = oWmiDisk.DriveLetter
nMaxSize = oWmiDisk.Capacity
If IsNull(sDriveLetter) Then
sDriveLetter  = oWmiDisk.Name
sDriveLetter = Left(sDriveLetter, Len(sDriveLetter)-1)
End If
Else
sDriveLetter = oWmiDisk.DeviceId
nMaxSize = oWmiDisk.Size
End If

'-----------------------------------------------Jonathan Almquist added functionality to check local csv file for user-defined threshold configuration---begin
Dim fs,objTextFile,objTextFileProperties,sMessage
Set fs=CreateObject("Scripting.FileSystemObject")
Dim arrStr

Dim sUserDefined, UserDefinedType, sModified
Dim UserDefinedWarningMB, UserDefinedErrorMB, UserDefinedWarningPct, UserDefinedErrorPct

sModified = "false"

If fs.FileExists(sDriveLetter &amp; "\scom_disk_monitoring.csv") Then
Set objTextFile = fs.OpenTextFile(sDriveLetter &amp; "\scom_disk_monitoring.csv")
Set objTextFileProperties = fs.GetFile(sDriveLetter &amp; "\scom_disk_monitoring.csv")

If DateDiff("s",objTextFileProperties.DateLastModified,Now()) &lt; CDbl(IntervalSeconds) Then
sModified = "true"
Else
sModified = "false"
End If

Do While NOT objTextFile.AtEndOfStream
arrStr = split(objTextFile.ReadLine,",")
UserDefinedType = arrStr(0)
If ubound(arrStr) &lt;&gt; 2 Then
sUserDefined = "Incorrect configuration file. Using SCOM thresholds."
ElseIf UserDefinedType = "mb" Then
UserDefinedWarningMB     = CDbl(arrStr(1))
UserDefinedErrorMB       = CDbl(arrStr(2))
sUserDefined     = "true"
ElseIf UserDefinedType = "%" Then
UserDefinedWarningPct    = CDbl(arrStr(1))
UserDefinedErrorPct      = CDbl(arrStr(2))
sUserDefined     = "true"
End If
Loop

objTextFile.Close
Set objTextFile = Nothing
Set fs = Nothing
Else sUserDefined = "false"
End If
'-----------------------------------------------Jonathan Almquist added functionality to check local csv file for user-defined threshold configuration---end

Set oBag = oAPI.CreatePropertyBag()

' If nMaxSize is null or 0 then drive is not formatted - do not return property bag for it.
If Not IsNull(nMaxSize) And nMaxSize &gt; 0 Then
nPctFree = Round(nFreeSpace / nMaxSize * 100, 0)
nMBFree = Round(nFreeSpace / BYTES_IN_MB, 0)
If sDriveLetter = SystemDrive Then
bIsSystemDrive = "true"
oBag.AddValue "IsSystemDrive", bIsSystemDrive
Else
bIsSystemDrive = "false"
oBag.AddValue "IsSystemDrive", bIsSystemDrive
End If

bBagIsNotEmpty = "true"

'---------------Jonathan Almquist need to perform user-defined state evaluation now and return property bag------begin
Dim UserDefinedState, UserDefinedMessage

If (sUserDefined = "true") Then
If UserDefinedType = "mb" Then
If (nMBFree &gt; UserDefinedErrorMB) and (nMBFree &lt;= UserDefinedWarningMB) Then
UserDefinedState = "1"
ElseIf (nMBFree &lt; UserDefinedErrorMB) Then
UserDefinedState = "2"
Else UserDefinedState = "0"
End If
ElseIf UserDefinedType = "%" Then
If (nPctFree &gt; UserDefinedErrorPct) and (nPctFree &lt;= UserDefinedWarningPct) Then
UserDefinedState = "1"
ElseIf (nPctFree &lt; UserDefinedErrorPct) Then
UserDefinedState = "2"
Else UserDefinedState = "0"
End If
End If
End If
'---------------Jonathan Almquist need to perform user-defined state evaluation now and return property bag------end



oBag.AddValue "IsNotEmpty", bBagIsNotEmpty
oBag.AddValue "DiskLabel", sDriveLetter
oBag.AddValue "Mb Free", CDbl(nMBFree)
oBag.AddValue "Pct Free", CDbl(nPctFree)
oBag.AddValue "User-Defined", sUserDefined
oBag.AddValue "User-Defined-Type", UserDefinedType
oBag.AddValue "User-Defined-WarningMB", UserDefinedWarningMB
oBag.AddValue "User-Defined-ErrorMB", UserDefinedErrorMB
oBag.AddValue "User-Defined-WarningPct", UserDefinedWarningPct
oBag.AddValue "User-Defined-ErrorPct", UserDefinedErrorPct
oBag.AddValue "User-Defined-State", UserDefinedState
If UserDefinedType = "mb" Then
UserDefinedMessage = "Configuration: Warning less than " &amp; UserDefinedWarningMB &amp; UserDefinedType &amp; ", Critical less than " &amp; UserDefinedErrorMB &amp; UserDefinedType
ElseIf UserDefinedType = "%" Then
UserDefinedMessage = "Configuration: Warning less than " &amp; UserDefinedWarningPct &amp; UserDefinedType &amp; ", Critical less than " &amp; UserDefinedErrorPct &amp; UserDefinedType
End If
If sModified = "true" Then Call oAPI.LogScriptEvent("Microsoft.Windows.Server.FreeSpace_Config_" &amp; sDriveLetter,100,0,"Free space threshold configuration for " &amp; sDriveLetter &amp; " had been changed. " &amp; UserDefinedMessage)
oBag.AddValue "User-Defined-Message", UserDefinedMessage
oBag.AddValue "Modified", sModified
oAPI.AddItem oBag

sMessage = "Drive: " &amp; sDriveLetter
'Call oAPI.LogScriptEvent("Windows.Monitoring.Extended.LogicalDiskFreeSpace.vbs",100,0,sMessage)

End If
End If
Next

if Not CBool(bBagIsNotEmpty) Then
Set oBag = oAPI.CreatePropertyBag()
oBag.AddValue "IsNotEmpty", bBagIsNotEmpty
oAPI.AddItem oBag
End If

oAPI.ReturnItems

'Call oAPI.LogScriptEvent("Windows.Monitoring.Extended.LogicalDiskFreeSpace.vbs",100,0,"Script Ended")

End Sub

Function GetDriveHealthState(ByVal bIsSystem, ByVal dSysWarnMB, ByVal dSysWarnPct, ByVal dSysErrorMB, ByVal dSysErrorPct, ByVal dNonSysWarnMB, ByVal dNonSysWarnPct, ByVal dNonSysErrorMB, byVal dNonSysErrorPct, ByVal dPctFree, ByVal dMBFree)
Dim fResult

fResult = DriveHealthyState

If (bIsSystem) Then
If (dMBFree &lt;= dSysErrorMB) and (dPctFree &lt;= dSysErrorPct) Then
fResult = DriveErrorState
ElseIf (dMBFree =&lt; dSysWarnMB) and (dPctFree =&lt; dSysWarnPct) Then
fResult = DriveWarningState
End If
Else
If (dMBFree &lt;= dNonSysErrorMB) and (dPctFree &lt;= dNonSysErrorPct) Then
fResult = DriveErrorState
ElseIf (dMBFree =&lt; dNonSysWarnMB) and (dPctFree =&lt; dNonSysWarnPct) Then
fResult = DriveWarningState
End If
End If

GetDriveHealthState = fResult

End Function

Function Is_Win32_Volume_Supported(ByRef TargetComputer)
Dim objWMISet, objWMIOS, blnRet
blnRet = False
Set objWMISet = WMIGetInstance("winmgmts:\\" &amp; TargetComputer &amp; "\root\cimv2", "Win32_OperatingSystem")
For Each objWMIOS in objWMISet
If CLng(objWMIOS.BuildNumber) &gt;= 3624 Then blnRet = True
Next
Is_Win32_Volume_Supported = blnRet
End Function

Function Get_System_Drive(ByRef TargetComputer)
Dim objWMISet, objWMIOS
Get_System_Drive = ""
Set objWMISet = WMIGetInstance("winmgmts:\\" &amp; TargetComputer &amp; "\root\cimv2", "Win32_OperatingSystem")
For Each objWMIOS in objWMISet
Get_System_Drive = Left(objWMIOS.SystemDirectory, 2)
Next
End Function
                  
                </ScriptBody>
                <TimeoutSeconds>300</TimeoutSeconds>
              </DataSource>
              <ConditionDetection ID="EmptyCD" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="Boolean">Property[@Name='IsNotEmpty']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="Boolean">true</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
              <ConditionDetection ID="InstanceFilter" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">Property[@Name='DiskLabel']</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">$Config/DiskLabel$</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="InstanceFilter">
                <Node ID="EmptyCD">
                  <Node ID="DS" />
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>System!System.BaseData</OutputType>
      </DataSourceModuleType>
      <DataSourceModuleType ID="Windows.Monitoring.Extended.DataSource.PercentMemoryUsed" Accessibility="Public" Batching="false">
        <Configuration>
          <xsd:element minOccurs="1" name="PhysicalMemory" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
        </OverrideableParameters>
        <ModuleImplementation Isolation="Any">
          <Composite>
            <MemberModules>
              <DataSource ID="PerfDS" TypeID="Perf!System.Performance.DataProvider">
                <CounterName>Available MBytes</CounterName>
                <ObjectName>Memory</ObjectName>
                <InstanceName />
                <AllInstances>false</AllInstances>
                <Frequency>$Config/IntervalSeconds$</Frequency>
              </DataSource>
              <ProbeAction ID="ScriptDS" TypeID="Windows!Microsoft.Windows.ScriptPropertyBagProbe">
                <ScriptName>Microsoft.Windows.Server.OperatingSystem.PercentMemoryUsed.vbs</ScriptName>
                <Arguments>$Data/Value$ $Config/PhysicalMemory$</Arguments>
                <ScriptBody>
                  'Copyright (c) Microsoft Corporation. All rights reserved.

                  '*************************************************************************
                  ' $ScriptName: "Microsoft.Windows.Server.Common"$
                  '
                  ' Purpose: To have one place for common stuff across various BaseOS VBScripts
                  '
                  ' $File: Microsoft.Windows.Server.Common.vbs$
                  '*************************************************************************

                  Option Explicit

                  SetLocale("en-us")

                  ' LogScripEvent Constants
                  Const lsEventError                 = 1
                  Const lsEventWarning               = 2
                  Const lsEventInformation           = 3

                  ' WMI Constants
                  Const wbemCimtypeUseDefault        = 0   'Use Default Type CIM type - Custom
                  Const wbemCimtypeSint16            = 2   'Signed 16-bit integer
                  Const wbemCimtypeSint32            = 3   'Signed 32-bit integer
                  Const wbemCimtypeReal32            = 4   '32-bit real number
                  Const wbemCimtypeReal64            = 5   '64-bit real number
                  Const wbemCimtypeString            = 8   'String
                  Const wbemCimtypeBoolean           = 11  'Boolean value
                  Const wbemCimtypeObject            = 13  'CIM object
                  Const wbemCimtypeSint8             = 16  'Signed 8-bit integer
                  Const wbemCimtypeUint8             = 17  'Unsigned 8-bit integer
                  Const wbemCimtypeUint16            = 18  'Unsigned 16-bit integer
                  Const wbemCimtypeUint32            = 19  'Unsigned 32-bit integer
                  Const wbemCimtypeSint64            = 20  'Signed 64-bit integer
                  Const wbemCimtypeUint64            = 21  'Unsigned 64-bit integer
                  Const wbemCimtypeDatetime          = 101 'Date/time value
                  Const wbemCimtypeReference         = 102 'Reference to a CIM object
                  Const wbemCimtypeChar16            = 103 '16-bit character

                  Const ErrAction_None               = 0
                  Const ErrAction_Trace              = 1
                  Const ErrAction_ThrowError         = 16
                  Const ErrAction_Abort              = 32
                  Const ErrAction_ThrowErrorAndAbort = 48

                  Dim g_ErrorEventNumber, g_TraceEventNumber, g_DebugFlag
                  g_ErrorEventNumber = 4001
                  g_TraceEventNumber = 4002
                  g_DebugFlag = False

                  '---------------------------------------------------------------------------
                  ' Returns WMI Instance requested. Tries to execute WMI query a N times.
                  '---------------------------------------------------------------------------
                  Function WMIGetInstanceExTryN(oWMI, ByVal sInstance, ByVal N)
                  Dim oInstance, nInstanceCount
                  Dim e, i
                  Set e = New Error

                  For i = 0 To i &lt; N
                  On Error Resume Next
                  Set oInstance = oWMI.InstancesOf(sInstance)
                  e.Save
                  On Error Goto 0
                  If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
                  If i = N - 1 Then
                  ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
                  End If
                  Else
                  On Error Resume Next
                  nInstanceCount = oInstance.Count
                  e.Save
                  On Error Goto 0
                  If e.Number &lt;&gt; 0 Then
                  If i = N - 1 Then
                  ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                  End If
                  Else
                  Exit For
                  End If
                  End If
                  WScript.Sleep(1000)
                  Next

                  Set WMIGetInstanceExTryN = oInstance
                  End Function

                  '---------------------------------------------------------------------------
                  ' Returns WMI Instance requested.
                  '---------------------------------------------------------------------------
                  Function WMIGetInstanceEx(oWMI, ByVal sInstance)
                  Dim oInstance, nInstanceCount
                  Dim e
                  Set e = New Error

                  On Error Resume Next
                  Set oInstance = oWMI.InstancesOf(sInstance)
                  e.Save
                  On Error Goto 0
                  If IsEmpty(oInstance) Or e.Number &lt;&gt; 0 Then
                  ThrowScriptError "The class name '" &amp; sInstance &amp; "' returned no instances.  Please check to see if this is a valid WMI class name.", e
                  End If

                  'Determine if we queried a valid WMI class - Count will return 0 or empty
                  On Error Resume Next
                  nInstanceCount = oInstance.Count
                  e.Save
                  On Error Goto 0
                  If e.Number &lt;&gt; 0 Then
                  ThrowScriptError "The class name '" &amp; sInstance &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI class name.", e
                  End If

                  Set WMIGetInstanceEx = oInstance
                  End Function

                  '---------------------------------------------------------------------------
                  ' Connect to WMI.
                  '---------------------------------------------------------------------------
                  Function WMIConnect(ByVal sNamespace)
                  Dim oWMI
                  Dim e
                  Set e = New Error
                  On Error Resume Next
                  Set oWMI = GetObject(sNamespace)
                  e.Save
                  On Error Goto 0
                  If IsEmpty(oWMI) Then
                  ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'. Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
                  End If
                  Set WMIConnect = oWMI
                  End Function

                  '---------------------------------------------------------------------------
                  ' Returns WMI Instance requested.
                  '---------------------------------------------------------------------------
                  Function WMIGetInstance(ByVal sNamespace, ByVal sInstance)
                  Dim oWMI, oInstance
                  Set oWMI = WMIConnect(sNamespace)
                  Set oInstance = WMIGetInstanceEx(oWMI, sInstance)
                  Set WMIGetInstance = oInstance
                  End Function

                  '---------------------------------------------------------------------------
                  ' Returns WMI Instance requested.
                  '---------------------------------------------------------------------------
                  Function WMIGetInstanceNoAbort(ByVal sNamespace, ByVal sInstance)
                  Dim oWMI, oInstance, nInstanceCount

                  On Error Resume Next
                  Set oWMI = GetObject(sNamespace)
                  If Not IsEmpty(oWMI) Then
                  Set oInstance = oWMI.InstancesOf(sInstance)
                  If Not IsEmpty(oInstance) And Err.Number = 0 Then
                  'Determine if we queried a valid WMI class - Count will return 0 or empty
                  nInstanceCount = oInstance.Count
                  If Err.Number = 0 Then
                  Set WMIGetInstanceNoAbort = oInstance
                  On Error Goto 0
                  Exit Function
                  End If
                  End If
                  End If

                  On Error Goto 0
                  Set WMIGetInstanceNoAbort = Nothing
                  End Function

                  '---------------------------------------------------------------------------
                  ' Executes the WMI query and returns the result set.
                  '---------------------------------------------------------------------------
                  Function WMIExecQuery(ByVal sNamespace, ByVal sQuery)
                  Dim oWMI, oQuery, nInstanceCount
                  Dim e
                  Set e = New Error
                  On Error Resume Next
                  Set oWMI = GetObject(sNamespace)
                  e.Save
                  On Error Goto 0
                  If IsEmpty(oWMI) Then
                  ThrowScriptError "Unable to open WMI Namespace '" &amp; sNamespace &amp; "'.  Check to see if the WMI service is enabled and running, and ensure this WMI namespace exists.", e
                  End If

                  On Error Resume Next
                  Set oQuery = oWMI.ExecQuery(sQuery)
                  e.Save
                  On Error Goto 0
                  If IsEmpty(oQuery) Or e.Number &lt;&gt; 0 Then
                  ThrowScriptError "The Query '" &amp; sQuery &amp; "' returned an invalid result set.  Please check to see if this is a valid WMI Query.", e
                  End If

                  'Determine if we queried a valid WMI class - Count will return 0 or empty
                  On Error Resume Next
                  nInstanceCount = oQuery.Count
                  e.Save
                  On Error Goto 0
                  If e.Number &lt;&gt; 0 Then
                  ThrowScriptError "The Query '" &amp; sQuery &amp; "' did not return any valid instances.  Please check to see if this is a valid WMI Query.", e
                  End If

                  Set WMIExecQuery = oQuery
                  End Function

                  '---------------------------------------------------------------------------
                  ' Executes the WMI query and returns the result set, no abort version.
                  '---------------------------------------------------------------------------
                  Function WMIExecQueryNoAbort(ByVal sNamespace, ByVal sQuery)
                  Dim oWMI, oQuery
                  Set oWMI = GetObject(sNamespace)
                  Set oQuery = oWMI.ExecQuery(sQuery)
                  Set WMIExecQueryNoAbort = oQuery
                  End Function

                  '---------------------------------------------------------------------------
                  ' Retrieves WMI property.
                  '---------------------------------------------------------------------------
                  Function GetWMIProperty(oWmi, sPropName, nCIMType, ErrAction)
                  Dim sValue, oWmiProp, oError
                  Set oError = New Error

                  ' Check that object is valid.
                  If Not IsValidObject(oWmi) Then
                  If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
                  ThrowScriptErrorNoAbort "Accessing property on invalid WMI object.", oError
                  If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
                  Quit()

                  GetWMIProperty = ""
                  Exit Function
                  End If

                  ' Get properties...
                  On Error Resume Next
                  Set oWmiProp = oWmi.Properties_.Item(sPropName)
                  oError.Save
                  If oError.Number &lt;&gt; 0 Then
                  If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
                  ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
                  If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
                  Quit()
                  End If
                  On Error Goto 0

                  If IsValidObject(oWmiProp) Then
                  sValue = oWmiProp.Value

                  If IsNull(sValue) Then ' If value is null, return blank to avoid any issues
                  GetWMIProperty = ""
                  Else
                  Select Case (oWmiProp.CIMType)
                  Case wbemCimtypeString, wbemCimtypeSint16, wbemCimtypeSint32, wbemCimtypeReal32, wbemCimtypeReal64, wbemCimtypeSint8, wbemCimtypeUint8, wbemCimtypeUint16, wbemCimtypeUint32, wbemCimtypeSint64, wbemCimtypeUint64:
                  If Not oWmiProp.IsArray Then
                  GetWMIProperty = Trim(CStr(sValue))
                  Else
                  GetWMIProperty = Join(sValue, ", ")
                  End If
                  Case wbemCimtypeBoolean:
                  If sValue = 1 Or UCase(sValue) = "TRUE" Then
                  GetWMIProperty = "True"
                  Else
                  GetWMIProperty = "False"
                  End If
                  Case wbemCimtypeDatetime:
                  Dim sTmpStrDate

                  ' First attempt to convert the whole wmi date string
                  sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                  Mid(sValue, 7, 2) &amp; "/" &amp; _
                  Left(sValue, 4) &amp; " " &amp; _
                  Mid (sValue, 9, 2) &amp; ":" &amp; _
                  Mid(sValue, 11, 2) &amp; ":" &amp; _
                  Mid(sValue, 13, 2)
                  If IsDate(sTmpStrDate) Then
                  GetWMIProperty = CDate(sTmpStrDate)
                  Else
                  ' Second, attempt just to convert the YYYYMMDD
                  sTmpStrDate = Mid(sValue, 5, 2) &amp; "/" &amp; _
                  Mid(sValue, 7, 2) &amp; "/" &amp; _
                  Left(sValue, 4)
                  If IsDate(sTmpStrDate) Then
                  GetWMIProperty = CDate(sTmpStrDate)
                  Else
                  ' Nothing works - return passed in string
                  GetWMIProperty = sValue
                  End If
                  End If
                  Case Else:
                  GetWMIProperty = ""
                  End Select
                  End If
                  Else
                  If (ErrAction And ErrAction_ThrowError) = ErrAction_ThrowError Then _
                  ThrowScriptErrorNoAbort "An error occurred while accessing WMI property: '" &amp; sPropName &amp; "'.", oError
                  If (ErrAction And ErrAction_Abort) = ErrAction_Abort Then _
                  Quit()

                  GetWMIProperty = ""
                  End If

                  If (ErrAction And ErrAction_Trace) = ErrAction_Trace Then _
                  WScript.Echo "  + " &amp; sPropName &amp; " :: '" &amp; GetWMIProperty &amp; "'"
                  End Function

                  '---------------------------------------------------------------------------
                  ' Class for error handling.
                  '---------------------------------------------------------------------------
                  Class Error
                  Private m_lNumber
                  Private m_sSource
                  Private m_sDescription
                  Private m_sHelpContext
                  Private m_sHelpFile
                  Public Sub Save()
                  m_lNumber = Err.number
                  m_sSource = Err.Source
                  m_sDescription = Err.Description
                  m_sHelpContext = Err.HelpContext
                  m_sHelpFile = Err.helpfile
                  End Sub
                  Public Sub Raise()
                  Err.Raise m_lNumber, m_sSource, m_sDescription, m_sHelpFile, m_sHelpContext
                  End Sub
                  Public Sub Clear()
                  m_lNumber = 0
                  m_sSource = ""
                  m_sDescription = ""
                  m_sHelpContext = ""
                  m_sHelpFile = ""
                  End Sub
                  Public Default Property Get Number()
                  Number = m_lNumber
                  End Property
                  Public Property Get Source()
                  Source = m_sSource
                  End Property
                  Public Property Get Description()
                  Description = m_sDescription
                  End Property
                  Public Property Get HelpContext()
                  HelpContext = m_sHelpContext
                  End Property
                  Public Property Get HelpFile()
                  HelpFile = m_sHelpFile
                  End Property
                  End Class

                  '---------------------------------------------------------------------------
                  ' Creates an event and sends it back to the mom server.
                  '---------------------------------------------------------------------------
                  Function ThrowScriptErrorNoAbort(ByVal sMessage, ByVal oErr)
                  ' Retrieve the name of this (running) script
                  Dim FSO, ScriptFileName
                  Set FSO = CreateObject("Scripting.FileSystemObject")
                  ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
                  Set FSO = Nothing

                  If Not IsNull(oErr) Then _
                  sMessage = sMessage &amp; ". " &amp; oErr.Description

                  On Error Resume Next
                  Dim oAPITemp
                  Set oAPITemp = CreateObject("MOM.ScriptAPI")
                  oAPITemp.LogScriptEvent ScriptFileName, g_ErrorEventNumber, lsEventError, sMessage
                  On Error Goto 0

                  WScript.Echo sMessage
                  End Function

                  '---------------------------------------------------------------------------
                  ' Creates an event and sends it back to the mom server.
                  '---------------------------------------------------------------------------
                  Function ThrowScriptError(Byval sMessage, ByVal oErr)
                  On Error Resume Next
                  ThrowScriptErrorNoAbort sMessage, oErr
                  Quit()
                  End Function

                  '---------------------------------------------------------------------------
                  ' Creates automation objects and returns it.
                  '---------------------------------------------------------------------------
                  Function MomCreateObject(ByVal sProgramId)
                  Dim oError
                  Set oError = New Error

                  On Error Resume Next
                  Set MomCreateObject = CreateObject(sProgramId)
                  oError.Save
                  On Error Goto 0

                  If oError.Number &lt;&gt; 0 Then
                  ThrowScriptError "Unable to create automation object '" &amp; sProgramId &amp; "'", oError
                  End If
                  End Function

                  '---------------------------------------------------------------------------
                  ' Quits the script.
                  '---------------------------------------------------------------------------
                  Function Quit()
                  WScript.Quit()
                  End Function

                  '---------------------------------------------------------------------------
                  ' Checks whether oObject is valid.
                  '---------------------------------------------------------------------------
                  Function IsValidObject(ByVal oObject)
                  IsValidObject = False
                  If IsObject(oObject) Then
                  If Not oObject Is Nothing Then
                  IsValidObject = True
                  End If
                  End If
                  End Function

                  '---------------------------------------------------------------------------
                  ' Outputs arguments for debugging purposes
                  '---------------------------------------------------------------------------
                  Function TraceLogArguments
                  Dim oArgs
                  Set oArgs = WScript.Arguments
                  Dim i, sArgs
                  For i = 0 To oArgs.Count - 1
                  sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
                  Next
                  TraceLogMessage "Arguments:" &amp; sArgs
                  End Function

                  '---------------------------------------------------------------------------
                  ' Verifies that number of arguments is correct
                  '---------------------------------------------------------------------------
                  Function VerifyNumberOfArguments(ByVal NumberOfArguments)
                  Dim oArgs
                  Set oArgs = WScript.Arguments
                  If oArgs.Count &lt;&gt; NumberOfArguments Then
                  Dim i, sArgs
                  For i = 0 To oArgs.Count - 1
                  sArgs = sArgs &amp; " {" &amp; oArgs(i) &amp; "}"
                  Next
                  ThrowScriptError "Invalid number of arguments (" &amp; oArgs.Count &amp; " instead of " &amp; NumberOfArguments &amp; "). Arguments:" &amp; sArgs, Null
                  End If
                  End Function

                  '---------------------------------------------------------------------------
                  ' Outputs to file and echo for debugging purposes
                  '---------------------------------------------------------------------------
                  Function TraceLogMessage(ByVal sMessage)
                  WScript.Echo sMessage

                  If g_DebugFlag = True Then
                  ' Retrieve the name of this (running) script
                  Dim FSO, ScriptFileName
                  Set FSO = CreateObject("Scripting.FileSystemObject")
                  ScriptFileName = FSO.GetFile(WScript.ScriptFullName).Name
                  Set FSO = Nothing

                  On Error Resume Next
                  Dim oAPITemp
                  Set oAPITemp = MOMCreateObject("MOM.ScriptAPI")
                  oAPITemp.LogScriptEvent ScriptFileName, g_TraceEventNumber, lsEventInformation, sMessage
                  On Error Goto 0
                  End If
                  End Function

                  '---------------------------------------------------------------------------
                  ' Verifies the expression. If equals to False then generates an error and quits the script
                  '   Usage:
                  '     Verify Not WMISet Is Nothing, "WMISet is invalid!"
                  '     Verify WMISet.Count = 1, "Invalid quantity of services with name 'Server' (qty = " &amp; WMISet.Count &amp; ")."
                  '---------------------------------------------------------------------------
                  Function Verify(ByVal bBool, ByVal sMessage)
                  If bBool = False Then
                  ThrowScriptError sMessage, Null
                  End If
                  End Function


                  Function GetRegistryKeyValue(ByVal keyPath, ByVal key)
                  Dim oReg, strKeyValue

                  Set oReg = MOMCreateObject("WScript.Shell")
                  On Error Resume Next

                  strKeyValue = oReg.RegRead(keyPath &amp; key)
                  If Err.Number &lt;&gt; 0 Then
                  ThrowScriptError "An error occurred while reading the registry: '" &amp; keyPath &amp; key &amp; "'", Err.Description
                  strKeyValue = ""
                  End If

                  ' resume error
                  On Error Goto 0

                  GetRegistryKeyValue = strKeyValue
                  End Function
                  'Copyright (c) Microsoft Corporation. All rights reserved.

                  '*************************************************************************
                  ' $ScriptName: "Microsoft.Windows.Server.OperatingSystem.PercentMemoryUsed"$
                  '
                  '
                  ' $File: Microsoft.Windows.Server.OperatingSystem.PercentMemoryUsed.vbs$
                  '*************************************************************************

                  ' Parameters that should be passed to this script
                  ' 0 Available Physical memory MBytes.
                  ' 1 Total amount of Physical Memory in KBytes.

                  Const sCounterName = "PercentMemoryUsed"
                  Const sObjectName  = "Memory"

                  Call Main()

                  Sub Main

                  VerifyNumberOfArguments(2)

                  Dim oArgs, sErrorDescription
                  Set oArgs = WScript.Arguments

                  Dim nAvailableMBytes, nPhysicalMemoryKBytes, nPhysicalMemoryMBytes, oAPI, nResult, oBag

                  nAvailableMBytes = oArgs(0)
                  nPhysicalMemoryKBytes  = oArgs(1)
                  nResult = 0
                  sErrorDescription = "Invalid arguments are detected: " &amp; nAvailableMBytes &amp; " " &amp; nPhysicalMemoryKBytes

                  If Not (IsNumeric(nAvailableMBytes) And IsNumeric(nPhysicalMemoryKBytes)) Then
                  ThrowScriptError sErrorDescription, Null
                  End If

                  nPhysicalMemoryMBytes = CDbl(nPhysicalMemoryKBytes/1024)

                  If (CDbl(nAvailableMBytes) &gt; 0) Then

                  If Not (CDbl(nAvailableMBytes) &lt; CDbl(nPhysicalMemoryMBytes)) Then
                  ThrowScriptError sErrorDescription, Null
                  End If

                  Set oAPI = MOMCreateObject("MOM.ScriptAPI")
                  Set oBag = oAPI.CreateTypedPropertyBag(2)

                  nResult = CDbl(100 - (nAvailableMBytes/(nPhysicalMemoryMBytes)*100))

                  With oBag
                  .AddValue "PerfCounter", sCounterName
                  .AddValue "PerfValue", nResult
                  End With

                  oAPI.AddItem oBag

                  oAPI.ReturnItems

                  End If

                  End Sub
                </ScriptBody>
                <TimeoutSeconds>300</TimeoutSeconds>
              </ProbeAction>
              <ConditionDetection ID="PerfMapper" TypeID="Perf!System.Performance.DataGenericMapper">
                <ObjectName>Memory</ObjectName>
                <CounterName>$Data/Property[@Name='PerfCounter']$</CounterName>
                <InstanceName />
                <Value>$Data/Property[@Name='PerfValue']$</Value>
              </ConditionDetection>
              <ConditionDetection ID="IsNullCD" TypeID="System!System.ExpressionFilter">
                <Expression>
                  <SimpleExpression>
                    <ValueExpression>
                      <XPathQuery Type="String">/DataItem/IsNull</XPathQuery>
                    </ValueExpression>
                    <Operator>Equal</Operator>
                    <ValueExpression>
                      <Value Type="String">false</Value>
                    </ValueExpression>
                  </SimpleExpression>
                </Expression>
              </ConditionDetection>
            </MemberModules>
            <Composition>
              <Node ID="PerfMapper">
                <Node ID="ScriptDS">
                  <Node ID="IsNullCD">
                    <Node ID="PerfDS" />
                  </Node>
                </Node>
              </Node>
            </Composition>
          </Composite>
        </ModuleImplementation>
        <OutputType>Perf!System.Performance.Data</OutputType>
      </DataSourceModuleType>
    </ModuleTypes>
    <MonitorTypes>
      <UnitMonitorType ID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" Accessibility="Internal">
        <MonitorTypeStates>
          <MonitorTypeState ID="UnderWarningThresholds" NoDetection="false" />
          <MonitorTypeState ID="OverWarningUnderErrorThresholds" NoDetection="false" />
          <MonitorTypeState ID="OverErrorThresholds" NoDetection="false" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="ComputerName" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="DiskLabel" type="xsd:string" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SystemDriveWarningMBytesThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SystemDriveWarningPercentThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SystemDriveErrorMBytesThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="SystemDriveErrorPercentThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NonSystemDriveWarningMBytesThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NonSystemDriveWarningPercentThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NonSystemDriveErrorMBytesThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="NonSystemDriveErrorPercentThreshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="SystemDriveWarningMBytesThreshold" Selector="$Config/SystemDriveWarningMBytesThreshold$" ParameterType="double" />
          <OverrideableParameter ID="SystemDriveWarningPercentThreshold" Selector="$Config/SystemDriveWarningPercentThreshold$" ParameterType="double" />
          <OverrideableParameter ID="SystemDriveErrorMBytesThreshold" Selector="$Config/SystemDriveErrorMBytesThreshold$" ParameterType="double" />
          <OverrideableParameter ID="SystemDriveErrorPercentThreshold" Selector="$Config/SystemDriveErrorPercentThreshold$" ParameterType="double" />
          <OverrideableParameter ID="NonSystemDriveWarningMBytesThreshold" Selector="$Config/NonSystemDriveWarningMBytesThreshold$" ParameterType="double" />
          <OverrideableParameter ID="NonSystemDriveWarningPercentThreshold" Selector="$Config/NonSystemDriveWarningPercentThreshold$" ParameterType="double" />
          <OverrideableParameter ID="NonSystemDriveErrorMBytesThreshold" Selector="$Config/NonSystemDriveErrorMBytesThreshold$" ParameterType="double" />
          <OverrideableParameter ID="NonSystemDriveErrorPercentThreshold" Selector="$Config/NonSystemDriveErrorPercentThreshold$" ParameterType="double" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="DS" TypeID="Windows.Monitoring.Extended.DataSource.LogicalDiskFreeSpace">
              <ComputerName>$Config/ComputerName$</ComputerName>
              <DiskLabel>$Config/DiskLabel$</DiskLabel>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
            </DataSource>
            <ConditionDetection ID="HealthyCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <!--Begin drive type check-->
                <Or>
                  <Expression>
                    <!--Begin non-system drive evaluation-->
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='IsSystemDrive']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">true</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <!--Begin threshold configuration for non-system drive-->
                        <Or>
                          <Expression>
                            <!--Use thresholds from local configuration file-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='User-Defined-State']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">0</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!--Use thresholds from monitor configuration.-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>NotEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Greater</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveWarningPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <!--Begin system drive evaluation-->
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='IsSystemDrive']</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">true</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <!--Begin threshold configuration for system drive-->
                        <Or>
                          <Expression>
                            <!--Use thresholds from local configuration file-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='User-Defined-State']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">0</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!--Use thresholds from monitor configuration-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>NotEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Greater</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveWarningPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="WarningCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <!--Begin drive type check-->
                <Or>
                  <Expression>
                    <!--Begin non-system drive evaluation-->
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='IsSystemDrive']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">true</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <!--Begin threshold configuration for non-system drive-->
                        <Or>
                          <Expression>
                            <!--Use thresholds from local configuration file-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='User-Defined-State']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">1</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!--Use thresholds from monitor configuration.-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>NotEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>LessEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveWarningPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Greater</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveErrorPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <!--Begin system drive evaluation-->
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='IsSystemDrive']</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">true</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <!--Begin threshold configuration for system drive-->
                        <Or>
                          <Expression>
                            <!--Use thresholds from local configuration file-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='User-Defined-State']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">1</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!--Use thresholds from monitor configuration-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>NotEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>LessEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveWarningPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Greater</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveErrorPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="ErrorCD" TypeID="System!System.ExpressionFilter">
              <Expression>
                <!--Begin drive type check-->
                <Or>
                  <Expression>
                    <!--Begin non-system drive evaluation-->
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='IsSystemDrive']</XPathQuery>
                          </ValueExpression>
                          <Operator>NotEqual</Operator>
                          <ValueExpression>
                            <Value Type="String">true</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <!--Begin threshold configuration for non-system drive-->
                        <Or>
                          <Expression>
                            <!--Use thresholds from local configuration file-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='User-Defined-State']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">2</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!--Use thresholds from monitor configuration.-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>NotEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>LessEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveErrorPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                  <Expression>
                    <!--Begin system drive evaluation-->
                    <And>
                      <Expression>
                        <SimpleExpression>
                          <ValueExpression>
                            <XPathQuery Type="String">Property[@Name='IsSystemDrive']</XPathQuery>
                          </ValueExpression>
                          <Operator>Equal</Operator>
                          <ValueExpression>
                            <Value Type="String">true</Value>
                          </ValueExpression>
                        </SimpleExpression>
                      </Expression>
                      <Expression>
                        <!--Begin threshold configuration for system drive-->
                        <Or>
                          <Expression>
                            <!--Use thresholds from local configuration file-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='User-Defined-State']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>Equal</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">2</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                          <Expression>
                            <!--Use thresholds from monitor configuration-->
                            <And>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="String">Property[@Name='User-Defined']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>NotEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="String">true</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                              <Expression>
                                <SimpleExpression>
                                  <ValueExpression>
                                    <XPathQuery Type="Integer">Property[@Name='Pct Free']</XPathQuery>
                                  </ValueExpression>
                                  <Operator>LessEqual</Operator>
                                  <ValueExpression>
                                    <Value Type="Integer">$Config/SystemDriveErrorPercentThreshold$</Value>
                                  </ValueExpression>
                                </SimpleExpression>
                              </Expression>
                            </And>
                          </Expression>
                        </Or>
                      </Expression>
                    </And>
                  </Expression>
                </Or>
              </Expression>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="UnderWarningThresholds">
              <Node ID="HealthyCD">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OverWarningUnderErrorThresholds">
              <Node ID="WarningCD">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="OverErrorThresholds">
              <Node ID="ErrorCD">
                <Node ID="DS" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
      <UnitMonitorType ID="Windows.Monitoring.Extended.MonitorType.PercentMemoryUsed" Accessibility="Public">
        <MonitorTypeStates>
          <MonitorTypeState ID="MTS_Over" />
          <MonitorTypeState ID="MTS_Under" />
        </MonitorTypeStates>
        <Configuration>
          <xsd:element minOccurs="1" name="PhysicalMemory" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="IntervalSeconds" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="Threshold" type="xsd:double" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
          <xsd:element minOccurs="1" name="MatchCount" type="xsd:integer" xmlns:xsd="http://www.w3.org/2001/XMLSchema" />
        </Configuration>
        <OverrideableParameters>
          <OverrideableParameter ID="IntervalSeconds" Selector="$Config/IntervalSeconds$" ParameterType="int" />
          <OverrideableParameter ID="Threshold" Selector="$Config/Threshold$" ParameterType="double" />
          <OverrideableParameter ID="MatchCount" Selector="$Config/MatchCount$" ParameterType="int" />
        </OverrideableParameters>
        <MonitorImplementation>
          <MemberModules>
            <DataSource ID="Script" TypeID="Windows.Monitoring.Extended.DataSource.PercentMemoryUsed">
              <PhysicalMemory>$Config/PhysicalMemory$</PhysicalMemory>
              <IntervalSeconds>$Config/IntervalSeconds$</IntervalSeconds>
            </DataSource>
            <ConditionDetection ID="CD_Under" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Value</XPathQuery>
                  </ValueExpression>
                  <Operator>Less</Operator>
                  <ValueExpression>
                    <Value Type="Double">$Config/Threshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
            </ConditionDetection>
            <ConditionDetection ID="CD_Over" TypeID="System!System.ExpressionFilter">
              <Expression>
                <SimpleExpression>
                  <ValueExpression>
                    <XPathQuery Type="Double">Value</XPathQuery>
                  </ValueExpression>
                  <Operator>GreaterEqual</Operator>
                  <ValueExpression>
                    <Value Type="Double">$Config/Threshold$</Value>
                  </ValueExpression>
                </SimpleExpression>
              </Expression>
              <SuppressionSettings>
                <MatchCount>$Config/MatchCount$</MatchCount>
              </SuppressionSettings>
            </ConditionDetection>
          </MemberModules>
          <RegularDetections>
            <RegularDetection MonitorTypeStateID="MTS_Under">
              <Node ID="CD_Under">
                <Node ID="Script" />
              </Node>
            </RegularDetection>
            <RegularDetection MonitorTypeStateID="MTS_Over">
              <Node ID="CD_Over">
                <Node ID="Script" />
              </Node>
            </RegularDetection>
          </RegularDetections>
        </MonitorImplementation>
      </UnitMonitorType>
    </MonitorTypes>
  </TypeDefinitions>
  <Monitoring>
    <Monitors>
      <UnitMonitor ID="Windows.Monitoring.Extended.Monitor.LogicalDiskFreeSpace" Accessibility="Public" Enabled="true" Target="Windows!Microsoft.Windows.LogicalDisk" ParentMonitorID="Health!System.Health.AvailabilityState" Remotable="true" Priority="Normal" TypeID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" ConfirmDelivery="true">
        <Category>AvailabilityHealth</Category>
        <AlertSettings AlertMessage="Windows.Monitoring.Extended.AlertMessage.LogicalDiskFreeSpace">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</AlertParameter1>
            <AlertParameter2>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/PrincipalName$</AlertParameter2>
            <AlertParameter3>$Data/Context/Property[@Name="Mb Free"]$</AlertParameter3>
            <AlertParameter4>$Data/Context/Property[@Name="Pct Free"]$</AlertParameter4>
            <AlertParameter5>$Data/Context/Property[@Name="User-Defined"]$</AlertParameter5>
            <AlertParameter6>$Data/Context/Property[@Name="User-Defined-Message"]$</AlertParameter6>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="UnderWarningThresholds" MonitorTypeStateID="UnderWarningThresholds" HealthState="Success" />
          <OperationalState ID="OverWarningUnderErrorThresholds" MonitorTypeStateID="OverWarningUnderErrorThresholds" HealthState="Warning" />
          <OperationalState ID="OverErrorThresholds" MonitorTypeStateID="OverErrorThresholds" HealthState="Error" />
        </OperationalStates>
        <Configuration>
          <ComputerName>$Target/Host/Property[Type="Windows!Microsoft.Windows.Computer"]/NetworkName$</ComputerName>
          <DiskLabel>$Target/Property[Type="Windows!Microsoft.Windows.LogicalDevice"]/DeviceID$</DiskLabel>
          <IntervalSeconds>900</IntervalSeconds>
          <SystemDriveWarningMBytesThreshold>500</SystemDriveWarningMBytesThreshold>
          <SystemDriveWarningPercentThreshold>10</SystemDriveWarningPercentThreshold>
          <SystemDriveErrorMBytesThreshold>300</SystemDriveErrorMBytesThreshold>
          <SystemDriveErrorPercentThreshold>5</SystemDriveErrorPercentThreshold>
          <NonSystemDriveWarningMBytesThreshold>2000</NonSystemDriveWarningMBytesThreshold>
          <NonSystemDriveWarningPercentThreshold>10</NonSystemDriveWarningPercentThreshold>
          <NonSystemDriveErrorMBytesThreshold>1000</NonSystemDriveErrorMBytesThreshold>
          <NonSystemDriveErrorPercentThreshold>5</NonSystemDriveErrorPercentThreshold>
        </Configuration>
      </UnitMonitor>
      <UnitMonitor ID="Windows.Monitoring.Extended.Monitor.PercentMemoryUsed" Accessibility="Public" Enabled="true" ParentMonitorID="Health!System.Health.PerformanceState" Priority="Normal" Target="Windows!Microsoft.Windows.Server.OperatingSystem" TypeID="Windows.Monitoring.Extended.MonitorType.PercentMemoryUsed">
        <Category>PerformanceHealth</Category>
        <AlertSettings AlertMessage="Windows.Monitoring.Extended.AlertMessage.PercentMemoryUsed">
          <AlertOnState>Error</AlertOnState>
          <AutoResolve>true</AutoResolve>
          <AlertPriority>Normal</AlertPriority>
          <AlertSeverity>Error</AlertSeverity>
          <AlertParameters>
            <AlertParameter1>$Data/Context/Value$</AlertParameter1>
          </AlertParameters>
        </AlertSettings>
        <OperationalStates>
          <OperationalState ID="OpState_Healthy" HealthState="Success" MonitorTypeStateID="MTS_Under" />
          <OperationalState ID="OpState_Unhealty" HealthState="Error" MonitorTypeStateID="MTS_Over" />
        </OperationalStates>
        <Configuration>
          <PhysicalMemory>$Target/Property[Type="Windows!Microsoft.Windows.OperatingSystem"]/PhysicalMemory$</PhysicalMemory>
          <IntervalSeconds>900</IntervalSeconds>
          <Threshold>90</Threshold>
          <MatchCount>2</MatchCount>
        </Configuration>
      </UnitMonitor>
    </Monitors>
    <Overrides>
      <MonitorPropertyOverride ID="Microsoft.Windows.Server.FreeSpace.Disable2003Monitor" Context="Windows!Microsoft.Windows.LogicalDisk" Property="Enabled" Enforced="false" Monitor="Windows2003!Microsoft.Windows.Server.2003.LogicalDisk.FreeSpace">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Microsoft.Windows.Server.FreeSpace.Disable2008Monitor" Context="Windows!Microsoft.Windows.LogicalDisk" Property="Enabled" Enforced="false" Monitor="Windows2008M!Microsoft.Windows.Server.2008.LogicalDisk.FreeSpace">
        <Value>false</Value>
      </MonitorPropertyOverride>
      <MonitorPropertyOverride ID="Microsoft.Windows.Server.FreeSpace.Disable2012Monitor" Context="Windows!Microsoft.Windows.LogicalDisk" Property="Enabled" Enforced="false" Monitor="Windows2012M!Microsoft.Windows.Server.6.2.LogicalDisk.FreeSpace">
        <Value>false</Value>
      </MonitorPropertyOverride>
    </Overrides>
  </Monitoring>
  <Presentation>
    <StringResources>
      <StringResource ID="Windows.Monitoring.Extended.AlertMessage.LogicalDiskFreeSpace" />
      <StringResource ID="Windows.Monitoring.Extended.AlertMessage.PercentMemoryUsed" />
    </StringResources>
  </Presentation>
  <LanguagePacks>
    <LanguagePack ID="ENU" IsDefault="true">
      <DisplayStrings>
        <DisplayString ElementID="Windows.Monitoring.Extended">
          <Name>Windows Monitoring (Extended)</Name>
          <Description>An extension management pack for various Windows Server monitoring scenarios, created by Jonathan Almquist at Scomskills (jonathan@scomskills.com)</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.Monitor.LogicalDiskFreeSpace">
          <Name>Logical Disk Free Space</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.AlertMessage.LogicalDiskFreeSpace">
          <Name>Logical Disk Free Space is low</Name>
          <Description>
            The disk {0} on computer {1} is running out of disk space.

            The disk had {2}Mb ({3}%) free space at the time of this alert.

            User-defined thresholds: {4}

            {5}

          </Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.Monitor.LogicalDiskFreeSpace" SubElementID="OverErrorThresholds">
          <Name>Free Space Critically Low</Name>
          <Description>Disk free space is very low</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.Monitor.LogicalDiskFreeSpace" SubElementID="OverWarningUnderErrorThresholds">
          <Name>Free Space Low</Name>
          <Description>Disk free space is low</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.Monitor.LogicalDiskFreeSpace" SubElementID="UnderWarningThresholds">
          <Name>Free Space Acceptable</Name>
          <Description>Disk free space is OK</Description>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.FreeSpace.Disable2003Monitor">
          <Name>Disable vendor Windows 2003 logical disk free space monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.FreeSpace.Disable2008Monitor">
          <Name>Disable vendor Windows 2008 logical disk free space monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Microsoft.Windows.Server.FreeSpace.Disable2012Monitor">
          <Name>Disable vendor Windows 2012 logical disk free space monitor</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.Monitor.PercentMemoryUsed">
          <Name>Windows Percent Memory Used</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.AlertMessage.PercentMemoryUsed">
          <Name>Windows Memory Over Threshold</Name>
          <Description>Windows memory is currently at 0: {0}%</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.DataSource.LogicalDiskFreeSpace">
          <Name>Windows Server Logical Disk Free Space Data Source</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace">
          <Name>Windows Server Logical Disk Free Space Monitor Type</Name>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="IntervalSeconds">
          <Name>IntervalSeconds</Name>
          <Description>Interval in seconds</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="NonSystemDriveErrorMBytesThreshold">
          <Name>Error Mbytes Threshold for Non-System Drives</Name>
          <Description>Error Mbytes Threshold for Non-System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="NonSystemDriveErrorPercentThreshold">
          <Name>Error % Threshold for Non-System Drives</Name>
          <Description>Error % Threshold for Non-System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="NonSystemDriveWarningMBytesThreshold">
          <Name>Non System Drive Warning MBytes Threshold</Name>
          <Description>Warning threshold in MBytes for the non system drives.</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="NonSystemDriveWarningPercentThreshold">
          <Name>Warning % Threshold for Non-System Drives</Name>
          <Description>Warning % Threshold for Non-System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="SystemDriveErrorMBytesThreshold">
          <Name>Error MBytes Threshold for System Drives</Name>
          <Description>Error MBytes Threshold for System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="SystemDriveErrorPercentThreshold">
          <Name>Error %Threshold for System Drives</Name>
          <Description>Error % Threshold for System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="SystemDriveWarningMBytesThreshold">
          <Name>Warning MBytes Threshold for System Drives</Name>
          <Description>Warning MBytes Threshold for System Drives</Description>
        </DisplayString>
        <DisplayString ElementID="Windows.Monitoring.Extended.MonitorType.LogicalDiskFreeSpace" SubElementID="SystemDriveWarningPercentThreshold">
          <Name>Warning % Threshold for System Drives</Name>
          <Description>Warning % Threshold for System Drives</Description>
        </DisplayString>
      </DisplayStrings>
      <KnowledgeArticles>
        <KnowledgeArticle ElementID="Windows.Monitoring.Extended.Monitor.LogicalDiskFreeSpace" Visible="true">
          <MamlContent>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Summary</maml:title>
              <maml:para>The amount of free disk space on the logical disk volume has exceeded the threshold. System performance may be adversely affected and the ability to add or modify existing files on the logical disk volume may not be possible until additional free space is made available.</maml:para>
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration (out-of-box)</maml:title>
              <maml:para>The Logical Disk Free Space monitoring routine is a highly configurable solution that enables Operators to set varying threshold values for system and non-system logical disk volumes. In addition separate threshold values can be set for Warning and Error states.</maml:para>
              <maml:para>Since logical disk volumes may vary in size from a few gigabytes to many terabytes or more the Logical Disk Free Space monitoring routine requires that an Operator indicate both the Megabyte and Percentage based threshold values that must be passed before the Warning and Error thresholds reached. This means that in order for the threshold to be reached both the Megabyte and Percentage based threshold values for the System or Non-System Drive must be breached.</maml:para>
              <maml:para>The default threshold values for the Logical Disk Free Space monitoring routine include:</maml:para>
              <maml:para>System Drive Free Space Thresholds (Defaults)</maml:para>
              <maml:table>
                <maml:row>
                  <maml:entry>
                    <maml:para>
                      <maml:ui>Parameter</maml:ui>
                    </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>
                      <maml:ui>Default Value</maml:ui>
                    </maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>System Drive Error Mbytes Threshold</maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>300</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>System Drive Error Percent Threshold</maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>5</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>System Drive Warning Mbytes Threshold </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>500</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>System Drive Warning Percent Threshold</maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>10</maml:para>
                  </maml:entry>
                </maml:row>
              </maml:table>
              <maml:para>Non-System Drive Free Space Thresholds (Defaults)</maml:para>
              <maml:table>
                <maml:row>
                  <maml:entry>
                    <maml:para>
                      <maml:ui>Parameter</maml:ui>
                    </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>
                      <maml:ui>Default Value</maml:ui>
                    </maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>Non-System Drive Error Mbytes Threshold </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>1000</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>Non-System Drive Error Percent Threshold</maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>5</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>Non-System Drive Warning Mbytes Threshold </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>2000</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>Non-System Drive Warning Percent Threshold</maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>10</maml:para>
                  </maml:entry>
                </maml:row>
              </maml:table>
              <maml:para />
              <maml:para>Please note that Overrides can be used to change any of the threshold values that are defined above. In addition these thresholds can be applied to all logical disk volume instances in the management group or if needed separate threshold values can be defined for specific logical disk volume instances.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Configuration (extended)</maml:title>
              <maml:para>In addition to the standard threshold configuration, this monitor enables local server administrators to manually set thresholds on the local server. This is accomplished by creating a comma-separated (csv) file at the root of any drive in which the administrator wants to override the default thresholds.</maml:para>
              <maml:para>To manually set thresholds for a disk on a local server:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Create a file at the root of the drive and name it "scom_disk_monitoring.csv".</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Enter threshold configuration for the target disk by first specifying the threshold type:</maml:para>
                  <maml:para>Percent (%) or megabyte (mb)</maml:para>
                  <maml:para></maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Enter the warning (integer value) threshold. By default, a state change event will occur at the warning threshold; no alert will be generated.</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Enter the critical (integer value) threshold. By default, a state change event will occur at the critical threshold and a critical alert will be generated.</maml:para>
                  <maml:para />
                </maml:listItem>
              </maml:list>
              <maml:table>
                <maml:row>
                  <maml:entry>
                    <maml:para>
                      <maml:ui>Example scenario</maml:ui>
                    </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>
                      <maml:ui>File should contain</maml:ui>
                    </maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>Warning state change event at 50% and critical alert at 25% </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>%,50,25</maml:para>
                  </maml:entry>
                </maml:row>
                <maml:row>
                  <maml:entry>
                    <maml:para>Warning state change event at 10GB and critical alert at 1GB </maml:para>
                  </maml:entry>
                  <maml:entry>
                    <maml:para>mb,10240,1024</maml:para>
                  </maml:entry>
                </maml:row>
              </maml:table>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Causes</maml:title>
              <maml:para>When existing files grow in size and the new files are added, the free space is taken up on a logical disk.  When the amount of free space on the logical disk falls below the threshold, the state for the logical disk will change.</maml:para>
              <maml:para />
            </maml:section>
            <maml:section xmlns:maml="http://schemas.microsoft.com/maml/2004/10">
              <maml:title>Resolutions</maml:title>
              <maml:para>To increase the amount of available disk space, do one or more of the following:</maml:para>
              <maml:list>
                <maml:listItem>
                  <maml:para>Run Disk Cleanup to gain more free space on the disk. </maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Back up and remove files, or delete unnecessary files from the disk. </maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Move files to another disk or to offline storage.</maml:para>
                </maml:listItem>
                <maml:listItem>
                  <maml:para>Purchase additional storage or switch to a larger disk.</maml:para>
                </maml:listItem>
              </maml:list>
              <maml:para />
            </maml:section>
          </MamlContent>
        </KnowledgeArticle>
      </KnowledgeArticles>
    </LanguagePack>
  </LanguagePacks>
</ManagementPack>